#!/usr/bin/env sh
#=====================================
# Description: This is a simple scritp
#    to help you more easy using Git.
# Author: zachary zhang
# Time: 2021-01-18
#=====================================

# Log colour scheme has bold yellow commit hash, bold blue author, cyan date, auto ref names
# See https://git-scm.com/docs/pretty-formats
_git_log_fuller_format='%C(bold yellow)commit %H%C(auto)%d%n%C(bold)Author: %C(blue)%an <%ae> %C(reset)%C(cyan)%ai (%ar)%n%C(bold)Commit: %C(blue)%cn <%ce> %C(reset)%C(cyan)%ci (%cr)%C(reset)%n%+B'

# Output format
COLOREND=\\033[0m
BLACK=\\033[30m
RED=\\033[31m
GREEN=\\033[32m
YELLOW=\\033[33m
PURPEL=\\033[34m
BLACK=\\033[35m
SKYFBLUE=\\033[36m
WHITE=\\033[37m
BLOD=\\033[1m


simple_git() {
    _check_git_status

    # process command
    case $1 in
        # Branch
        'b'  )git branch ${@:2:$((${#@}))};;
        'bc' )git checkout -b ${@:2:$((${#@}))};;
        'bl' )git branch -vv;;
        'bL' )git branch --all -vv;;
        'bs' )git show-branch;;
        'bS' )git show-branch --all;;
        'bm' )git branch --move ${@:2:$((${#@}))};;
        'bM' )git branch --move --force ${@:2:$((${#@}))};;
        #'bx')git-branch-delete-interactive;;
        #'bX')git-branch-delete-interactive --force;;


        # Commit
        'c'  )git commit --verbose ${@:2:$((${#@}))};;
        'ca' )git commit --verbose --all;;
        'cA' )git commit --verbose --patch;;
        'cm' )git commit --verbose --message ${@:2:$((${#@}))};;
        'co' )git checkout ${@:2:$((${#@}))};;
        'cO' )git checkout --pathc ${@:2:$((${#@}))};;
        'cf' )git commit --amend --reuse-message HEAD;;
        "cF" )git commit --verbose --amend;;
        'cr' )git revert ${@:2:$((${#@}))};;
        'cR' )git reset "HEAD^";;
        'cs' )git show --pretty=format:"${_git_log_fuller_format}";;


        # Conflict(C)
        'Cl' )git --no-paper diff --diff-filter=U --name-only;;
        'Ca' )git add $(git --no-paper diff --diff-filter=U --name-only);;
        'Ce' )git mergetool $(git --no-paper diff --diff-filter=U --name-only);;
        'Co' )git checkout --ours --;;
        'CO' )git checkout --ours -- $(git --no-paper diff --diff-filter=U --name-only);;
        'Ct' )git checkout --theirs --;;
        'CT' )git checkout --theirs -- $(git --no-paper diff --diff-filter=U --name-only);;


        # Fetch(f)
        'f'  )git fetch ${@:2:$((${#@}))};;
        'fc' )git clone ${@:2:$((${#@}))};;
        'fm' )git pull ${@:2:$((${#@}))};;
        'fr' )git pull --rebase ${@:2:$((${#@}))};;
        'fu' )git fetch --all --prune && git merge --ff-only @\{u\};;
        'fb'  )git fetch origin $2:$2;;


        # Index(i)
        'ia' )
            if [[ $2 ]]; then
                git add ${@:2:$((${#@}))}
            else
                git add .
            fi
            ;;
        'iA' )git add --patch ;;
        'iu' )git add --update ${@:2:$((${#@}))};;
        'id' )git diff --no-ext-diff --cached;;
        'iD' )git diff --no-ext-diff --cached --word-diff;;
        'ir' )git reset ${@:2:$((${#@}))};;
        'iR' )git reset --patch;;
        'ix' )git rm --cached -r ${@:2:$((${#@}))};;
        'iX' )git rm --cached -rf ${@:2:$((${#@}))};;


        # Log(l)
        'l'  )
            if [[ $2 == '1' ]]; then
                git log --graph --all --decorate --oneline ${@:3:$((${#@}))}
            else
                git log --graph --all --decorate ${@:2:$((${#@}))}
            fi
            ;;
        'ls' )git log --topo-order --stat --pretty=format:"${_git_log_fuller_format}";;
        'ld' )git log --topo-order --stat --patch --pretty=format:"${_git_log_fuller_format}";;
        'lv' )git log --topo-order --show-signature --pretty=format:"${_git_log_fuller_format}";;
        'lc' )git shortlog --summary --numbered;;
        'lr' )git reflog;;


        # Merge(m)
        "m"  )git merge ${@:2:$((${#@}))};;
        "ma" )git merge --abort;;
        "mC" )git merge --no-commit;;
        "mF" )git merge --no-ff;;
        "mS" )git merge -S;;
        "mv" )git merge --verify-signatures;;
        "mt" )git mergetool;;


        # Push(p)
        "p"  )git push ${@:2:$((${#@}))};;
        "pf" )git push --force-with-lease ${@:2:$((${#@}))};;
        "pF" )git push --force ${@:2:$((${#@}))};;
        "pa" )git push --all ${@:2:$((${#@}))};;
        "pA" )git push --all && git push --tags;;
        "pt" )git push --tags ${@:2:$((${#@}))};;
        "pc" )git push --set-upstream origin "$(git-branch-current 2> /dev/null)";;
        "pp" )git pull origin "$(git-branch-current 2> /dev/null)" && git push origin "$(git-branch-current 2> /dev/null)";;


        # Remote(R)
        "R" )git remote ${@:2:$((${#@}))};;
        "Rl")git remote --verbose ${@:2:$((${#@}))};;
        "Ra")git remote add ${@:2:$((${#@}))};;
        "Rx")git remote rm ${@:2:$((${#@}))};;
        "Rm")git remote rename ${@:2:$((${#@}))};;
        "Ru")git remote update ${@:2:$((${#@}))};;
        "Rp")git remote prune ${@:2:$((${#@}))};;
        "Rs")git remote show;;
        "RS")git remote set-url ${@:2:$((${#@}))};;


        # Stash(s)
        's'  )git stash ${@:2:$((${#@}))};;
        'sp' )git stash pop;;
        'sl' )git stash list;;


        # Tag (t)
        't'  )git tag ${@:2:$((${#@}))};;
        'ta' )git tag -a ${@:2:$((${#@}))};;
        'tx' )git tag --delete ${@:2:$((${#@}))};;


        # Working tree(w)
        "ws" )git status --short;;
        "wS" )git status ${@:2:$((${#@}))};;
        "wd" )git diff --no-ext-diff ${@:2:$((${#@}))};;
        "wD" )git diff --no-ext-diff --word-diff ${@:2:$((${#@}))};;
        "wr" )git reset --soft ${@:2:$((${#@}))};;
        "wR" )git reset --hard ${@:2:$((${#@}))};;
        "wc" )git clean --dry-run ${@:2:$((${#@}))};;
        "wC" )git clean -d --force ${@:2:$((${#@}))};;
        "wm" )git mv ${@:2:$((${#@}))};;
        "wM" )git mv -f ${@:2:$((${#@}))};;
        "wx" )git rm -r ${@:2:$((${#@}))};;
        "wX" )git rm -rf ${@:2:$((${#@}))};;


        # Setting
        'savepd')git config credential.helper store;;
        'user'  )git config user.name ${@:2:$((${#@}))};;
        'email'   )git config user.email ${@:2:$((${#@}))};;


        # Help message
        '-h')_help_mesg "english";;
        '-hc')_help_mesg "chinese";; # Chinese


        *)
            if [[ $1 =~ 'b' ]];then
                echo ${BRANCH_MSG}
            elif [[ $1 =~ 'c' ]];then
                echo ${COMMIT_MSG}
            elif [[ $1 =~ 'C' ]];then
                echo ${CONFLICT_MSG}
            elif [[ $1 =~ 'f' ]];then
                echo ${FETCH_MSG}
            elif [[ $1 =~ 'i' ]];then
                echo ${INDEX_MSG}
            elif [[ $1 =~ 'l' ]];then
                echo ${LOG_MSG}
            elif [[ $1 =~ 'm' ]];then
                echo ${MERGE_NSG}
            elif [[ $1 =~ 'p' ]];then
                echo ${PUSH_MSG}
            elif [[ $1 =~ 'R' ]];then
                echo ${REMOTE_MSG}
            elif [[ $1 =~ 's' ]];then
                echo ${STASH_MSG}
            elif [[ $1 =~ 't' ]];then
                echo ${TAG_MSG}
            elif [[ $1 =~ 'w' ]];then
                echo ${WORKING_TREE_MSG}
            else
                git $@
            fi
        ;;
    esac
}

_check_git_status() {
    # adjust wether has git
    if ! command -v git >/dev/null 2>&1; then
        echo "${RED}Not found git, please install git first.${COLOREND}"
        exit 0
    fi
}

# {{{
BRANCH_MSG="${BLOD}Branch(b)\033[0m\n\n
\t b  \t ${YELLOW}--:${COLOREND} lists, creates, renames, and deletes branches.\n
\t bc \t ${YELLOW}--:${COLOREND} creates a new branch.\n
\t bl \t ${YELLOW}--:${COLOREND} lists branches and their commits.\n
\t bL \t ${YELLOW}--:${COLOREND} lists local and remote branches and their commits.\n
\t bs \t ${YELLOW}--:${COLOREND} lists branches and their commits with ancestry graphs.\n
\t bS \t ${YELLOW}--:${COLOREND} lists local and remote branches and their commits with ancestry graphs.\n
\t bm \t ${YELLOW}--:${COLOREND} renames a branch.\n
\t bM \t ${YELLOW}--:${COLOREND} renames a branch even if the new branch name already exists.\n"

COMMIT_MSG="${BLOD}Commit(c)${COLOREND}\n
\t    c  \t     ${YELLOW}--:${COLOREND} records changes to the repository.\n
\t    ca \t     ${YELLOW}--:${COLOREND} commits all modified and deleted files.\n
\t    cA \t     ${YELLOW}--:${COLOREND} commits all modified and deleted files interactivly.\n
\t    cm \t     ${YELLOW}--:${COLOREND} commits with the given message.\n
\t    co \t     ${YELLOW}--:${COLOREND} checks out a branch or paths to the working tree.\n
\t    cO \t     ${YELLOW}--:${COLOREND} checks out hunks from the index or the tree interactively.\n
\t    cf \t     ${YELLOW}--:${COLOREND} amends the tip of the current branch reusing the same log message as HEAD.\n
\t    cF \t     ${YELLOW}--:${COLOREND} amends the tip of the current branch.\n
\t    cr \t     ${YELLOW}--:${COLOREND} reverts existing commits by reverting patches and recording new commits.\n
\t    cR \t     ${YELLOW}--:${COLOREND} removes the HEAD commit.\n
\t    cs \t     ${YELLOW}--:${COLOREND} shows one or more objects (blobs, trees, tags and commits).\n"

CONFLICT_MSG="${BLOD}Conflict(C)${COLOREND}\n
\t    Cl \t     ${YELLOW}--:${COLOREND} lists unmerged files.\n
\t    Ca \t     ${YELLOW}--:${COLOREND} adds unmerged file contents to the index.\n
\t    Ce \t     ${YELLOW}--:${COLOREND} executes merge-tool on all unmerged files.\n
\t    Co \t     ${YELLOW}--:${COLOREND} checks out our changes for unmerged paths.\n
\t    CO \t     ${YELLOW}--:${COLOREND} checks out our changes for all unmerged paths.\n
\t    Ct \t     ${YELLOW}--:${COLOREND} checks out their changes for unmerged paths.\n
\t    CT \t     ${YELLOW}--:${COLOREND} checks out their changes for all unmerged paths.\n"

FETCH_MSG="${BLOD}Fetch(f)${COLOREND}\n
\t    f  \t     ${YELLOW}--:${COLOREND} downloads objects and references from another repository.\n
\t    fc \t     ${YELLOW}--:${COLOREND} clones a repository into a new directory.\n
\t    fm \t     ${YELLOW}--:${COLOREND} fetches from and merges with another repository or local branch.\n
\t    fr \t     ${YELLOW}--:${COLOREND} fetches from and rebases on top of another repository or local branch.\n
\t    fu \t     ${YELLOW}--:${COLOREND} removes unexisting remote-tracking references, fetches all remotes and merges.\n
\t    fb \t     ${YELLOW}--:${COLOREND} fetch other branch to local as same name.\n"

INDEX_MSG="${BLOD}Index(i)${COLOREND}\n
\t    ia \t     ${YELLOW}--:${COLOREND} adds file contents to the index(default: all files).\n
\t    iA \t     ${YELLOW}--:${COLOREND} adds file contents to the index interactively.\n
\t    iu \t     ${YELLOW}--:${COLOREND} adds file contents to the index (updates only known files).\n
\t    id \t     ${YELLOW}--:${COLOREND} displays changes between the index and a named commit (diff).\n
\t    iD \t     ${YELLOW}--:${COLOREND} displays changes between the index and a named commit (word diff).\n
\t    ir \t     ${YELLOW}--:${COLOREND} resets the current HEAD to the specified state.\n
\t    iR \t     ${YELLOW}--:${COLOREND} resets the current index interactively.\n
\t    ix \t     ${YELLOW}--:${COLOREND} removes files from the index (recursively).\n
\t    iX \t     ${YELLOW}--:${COLOREND} removes files from the index (recursively and forced).\n"

LOG_MSG="${BLOD}Log(l)${COLOREND}\n
\t    l  \t     ${YELLOW}--:${COLOREND} displays the log.\n
\t    ls \t     ${YELLOW}--:${COLOREND} displays the stats log.\n
\t    ld \t     ${YELLOW}--:${COLOREND} displays the diff log.\n
\t    lv \t     ${YELLOW}--:${COLOREND} displays the log, verifying the GPG signature of commits.\n
\t    lc \t     ${YELLOW}--:${COLOREND} displays the commit count for each contributor in descending order.\n
\t    lr \t     ${YELLOW}--:${COLOREND} manages reflog information.\n"

MERGE_NSG="${BLOD}Merge(m)${COLOREND}\n
\t    m  \t     ${YELLOW}--:${COLOREND} joins two or more development histories together.\n
\t    ma \t     ${YELLOW}--:${COLOREND} aborts the conflict resolution, and reconstructs the pre-merge state.\n
\t    mC \t     ${YELLOW}--:${COLOREND} performs the merge but does not commit.\n
\t    mF \t     ${YELLOW}--:${COLOREND} creates a merge commit even if the merge could be resolved as a fast-forward.\n
\t    mS \t     ${YELLOW}--:${COLOREND} performs the merge and GPG-signs the resulting commit.\n
\t    mv \t     ${YELLOW}--:${COLOREND} verifies the GPG signature of the tip commit of the side branch being merged.\n
\t    mt \t     ${YELLOW}--:${COLOREND} runs the merge conflict resolution tools to resolve conflicts.\n"

PUSH_MSG="${BLOD}Push(p)${COLOREND}\n 
\t    p   \t     ${YELLOW}--:${COLOREND} updates remote refs along with associated objects.\n 
\t    pf  \t     ${YELLOW}--:${COLOREND} forces a push safely (with \"lease\").\n 
\t    pF  \t     ${YELLOW}--:${COLOREND} forces a push.\n 
\t    pa  \t     ${YELLOW}--:${COLOREND} pushes all branches.\n 
\t    pA  \t     ${YELLOW}--:${COLOREND} pushes all branches and tags.\n 
\t    pt  \t     ${YELLOW}--:${COLOREND} pushes all tags.\n 
\t    pc  \t     ${YELLOW}--:${COLOREND} pushes the current branch and adds origin as an upstream reference for it.\n 
\t    pp  \t     ${YELLOW}--:${COLOREND} pulls and pushes the current branch from origin to origin.\n" 

REMOTE_MSG="${BLOD}Remote(R)${COLOREND}\n
\t    R  \t      ${YELLOW}--:${COLOREND} manages tracked repositories.\n
\t    Rl \t      ${YELLOW}--:${COLOREND} lists remote names and their URLs.\n
\t    Ra \t      ${YELLOW}--:${COLOREND} adds a new remote.\n
\t    Rx \t      ${YELLOW}--:${COLOREND} removes a remote.\n
\t    Rm \t      ${YELLOW}--:${COLOREND} renames a remote.\n
\t    Ru \t      ${YELLOW}--:${COLOREND} fetches remotes updates.\n
\t    Rp \t      ${YELLOW}--:${COLOREND} prunes all stale remote tracking branches.\n
\t    Rs \t      ${YELLOW}--:${COLOREND} shows information about a given remote.\n
\t    RS \t      ${YELLOW}--:${COLOREND} changes URLs for a remote.\n"

STASH_MSG="${BLOD}Stash(s)${COLOREND}\n
\t    s  \t      ${YELLOW}--:${COLOREND} stashes the changes of the dirty working directory.\n
\t    sp \t      ${YELLOW}--:${COLOREND} removes and applies a single stashed state from the stash list.\n
\t    sl \t      ${YELLOW}--:${COLOREND} lists stashed states.\n"

TAG_MSG="${BLOD}Tag(t)${COLOREND}\n
\t  t  \t ${YELLOW}--:${COLOREND} creates, lists, deletes or verifies a tag object signed with GPG.\n
\t  ta \t ${YELLOW}--:${COLOREND} create a new tag.\n
\t  tx \t ${YELLOW}--:${COLOREND} deletes tags with given names.\n"

WORKING_TREE_MSG="${BLOD}Working tree(w)${COLOREND}\n
\t    ws  \t     ${YELLOW}--:${COLOREND} displays working-tree status in the short format.\n
\t    wS  \t     ${YELLOW}--:${COLOREND} displays working-tree status.\n
\t    wd  \t     ${YELLOW}--:${COLOREND} displays changes between the working tree and the index (diff).\n
\t    wD  \t     ${YELLOW}--:${COLOREND} displays changes between the working tree and the index (word diff).\n
\t    wr  \t     ${YELLOW}--:${COLOREND} resets the current HEAD to the specified state, does not touch the index nor the working tree.\n
\t    wR  \t     ${YELLOW}--:${COLOREND} resets the current HEAD, index and working tree to the specified state.\n
\t    wc  \t     ${YELLOW}--:${COLOREND} cleans untracked files from the working tree (dry-run).\n
\t    wC  \t     ${YELLOW}--:${COLOREND} cleans untracked files from the working tree.\n
\t    wm  \t     ${YELLOW}--:${COLOREND} moves or renames files.\n
\t    wM  \t     ${YELLOW}--:${COLOREND} moves or renames files (forced).\n
\t    wx  \t     ${YELLOW}--:${COLOREND} removes files from the working tree and from the index (recursively).\n
\t    wX  \t     ${YELLOW}--:${COLOREND} removes files from the working tree and from the index (recursively and forced).\n"

_help_mesg() {
    LANG=$1
    case $LANG in
        "english" )
            echo "usage: g <command> [<args>]\n\n"\
            "These are short commands that can replace git operations:\n\n"\
            $BRANCH_MSG\
            "\n"\
            ${COMMIT_MSG}\
            "\n"\
            ${CONFLICT_MSG}\
            "\n"\
            ${FETCH_MSG}\
            "\n"\
            ${INDEX_MSG}\
            "\n"\
            ${LOG_MSG}\
            "\n"\
            ${MERGE_NSG}\
            "\n"\
            ${PUSH_MSG}\
            "\n"\
            ${REMOTE_MSG}\
            "\n"\
            ${STASH_MSG}\
            "\n"\
            ${TAG_MSG}\
            "\n"\
            ${WORKING_TREE_MSG}\
            "\n${BLOD}Setting${COLOREND}\n"\
            "\tsavepd   \t${YELLOW}--${COLOREND} Remember your account number and password. \n"\
            "\tuser     \t${YELLOW}--${COLOREND} Set your username. \n"\
            "\temail    \t${YELLOW}--${COLOREND} Set your email. \n"\
        ;;

        "chinese" )
            echo "用法: g <command> [<args>]\n\n"\
            "这里是可以替代 Git 操作的简单命令:\n\n"\
            "${BLOD}Branch(b)\033[0m\n"\
            "    b       ${YELLOW}--:${COLOREND} 展示、创建、重命名和删除分支\n"\
            "    bc      ${YELLOW}--:${COLOREND} 创建一个新的分支\n"\
            "    bl      ${YELLOW}--:${COLOREND} 展示分支和他们的提交信息\n"\
            "    bL      ${YELLOW}--:${COLOREND} 展示本地和远程分支与他们的提交信息\n"\
            "    bs      ${YELLOW}--:${COLOREND} lists branches and their commits with ancestry graphs.\n"\
            "    bS      ${YELLOW}--:${COLOREND} lists local and remote branches and their commits with ancestry graphs.\n"\
            "    bm      ${YELLOW}--:${COLOREND} 重命名分支\n"\
            "    bM      ${YELLOW}--:${COLOREND} 重命名分支无论是否已存在\n"\
            "\n${BLOD}Commit(c)${COLOREND}\n"\
            "    c       ${YELLOW}--:${COLOREND} 提交\n"\
            "    ca      ${YELLOW}--:${COLOREND} 提交所有修改和删除\n"\
            "    cA      ${YELLOW}--:${COLOREND} 交互方式提交所有修改和删除\n"\
            "    cm      ${YELLOW}--:${COLOREND} 使用你给出的消息提交\n"\
            "    co      ${YELLOW}--:${COLOREND} checks out a branch or paths to the working tree.\n"\
            "    cO      ${YELLOW}--:${COLOREND} checks out hunks from the index or the tree interactively.\n"\
            "    cf      ${YELLOW}--:${COLOREND} amends the tip of the current branch reusing the same log message as HEAD.\n"\
            "    cF      ${YELLOW}--:${COLOREND} amends the tip of the current branch.\n"\
            "    cr      ${YELLOW}--:${COLOREND} reverts existing commits by reverting patches and recording new commits.\n"\
            "    cR      ${YELLOW}--:${COLOREND} removes the HEAD commit.\n"\
            "    cs      ${YELLOW}--:${COLOREND} shows one or more objects (blobs, trees, tags and commits).\n"\
            "\n${BLOD}Conflict(C)${COLOREND}\n"\
            "    Cl      ${YELLOW}--:${COLOREND} 展示未合并的文件\n"\
            "    Ca      ${YELLOW}--:${COLOREND} 添加未合并的文件到索引\n"\
            "    Ce      ${YELLOW}--:${COLOREND} 使用 merge-tool 在所有未合并的文件上\n"\
            "    Co      ${YELLOW}--:${COLOREND} 在未合并的文件上使用我们的修改\n"\
            "    CO      ${YELLOW}--:${COLOREND} 在所有未合并的文件上使用我们的修改\n"\
            "    Ct      ${YELLOW}--:${COLOREND} 在未合并的文件上使用他们的修改\n"\
            "    CT      ${YELLOW}--:${COLOREND} 在所有未合并的文件上使用他们的修改\n"\
            "\n${BLOD}Fetch(f)${COLOREND}\n"\
            "    f       ${YELLOW}--:${COLOREND} downloads objects and references from another repository.\n"\
            "    fc      ${YELLOW}--:${COLOREND} clones a repository into a new directory.\n"\
            "    fm      ${YELLOW}--:${COLOREND} fetches from and merges with another repository or local branch.\n"\
            "    fr      ${YELLOW}--:${COLOREND} fetches from and rebases on top of another repository or local branch.\n"\
            "    fu      ${YELLOW}--:${COLOREND} removes unexisting remote-tracking references, fetches all remotes and merges.\n"\
            "    fb      ${YELLOW}--:${COLOREND} fetch other branch to local as same name.\n"\
            "\n${BLOD}Index(i)${COLOREND}\n"\
            "    ia      ${YELLOW}--:${COLOREND} 将文件添加到索引（默认所有）\n"\
            "    iA      ${YELLOW}--:${COLOREND} 交互方式的添加文件到索引\n"\
            "    iu      ${YELLOW}--:${COLOREND} 将文件添加到索引 (updates only known files).\n"\
            "    id      ${YELLOW}--:${COLOREND} 显示索引和命名空间的更改(diff)\n"\
            "    iD      ${YELLOW}--:${COLOREND} 显示索引和命名空间的更改(word diff)\n"\
            "    ir      ${YELLOW}--:${COLOREND} resets the current HEAD to the specified state.\n"\
            "    iR      ${YELLOW}--:${COLOREND} resets the current index interactively.\n"\
            "    ix      ${YELLOW}--:${COLOREND} removes files from the index (recursively).\n"\
            "    iX      ${YELLOW}--:${COLOREND} removes files from the index (recursively and forced).\n"\
            "\n${BLOD}Log(l)${COLOREND}\n"\
            "    l       ${YELLOW}--:${COLOREND} 展示日志\n"\
            "    ls      ${YELLOW}--:${COLOREND} 展示状态日志\n"\
            "    ld      ${YELLOW}--:${COLOREND} 展示区别日志\n"\
            "    lv      ${YELLOW}--:${COLOREND} displays the log, verifying the GPG signature of commits.\n"\
            "    lc      ${YELLOW}--:${COLOREND} 已降序的方式展示提交者和提交数\n"\
            "    lr      ${YELLOW}--:${COLOREND} 管理更新信息\n"\
            "\n${BLOD}Merge(m)${COLOREND}\n"\
            "    m       ${YELLOW}--:${COLOREND} 合并两个或更多的记录\n"\
            "    ma      ${YELLOW}--:${COLOREND} aborts the conflict resolution, and reconstructs the pre-merge state.\n"\
            "    mC      ${YELLOW}--:${COLOREND} performs the merge but does not commit.\n"\
            "    mF      ${YELLOW}--:${COLOREND} creates a merge commit even if the merge could be resolved as a fast-forward.\n"\
            "    mS      ${YELLOW}--:${COLOREND} performs the merge and GPG-signs the resulting commit.\n"\
            "    mv      ${YELLOW}--:${COLOREND} verifies the GPG signature of the tip commit of the side branch being merged.\n"\
            "    mt      ${YELLOW}--:${COLOREND} runs the merge conflict resolution tools to resolve conflicts.\n"\
            "\n${BLOD}Push(p)${COLOREND}\n"\
            "    p        ${YELLOW}--:${COLOREND} 更新远程引用及对象updates remote refs along with associated objects.\n"\
            "    pf       ${YELLOW}--:${COLOREND} 安全的强制推送forces a push safely (with "lease").\n"\
            "    pF       ${YELLOW}--:${COLOREND} 强制推送forces a push.\n"\
            "    pa       ${YELLOW}--:${COLOREND} 推送所有分支pushes all branches.\n"\
            "    pA       ${YELLOW}--:${COLOREND} 推送所有分支和标签pushes all branches and tags.\n"\
            "    pt       ${YELLOW}--:${COLOREND} 推送所有标签pushes all tags.\n"\
            "    pc       ${YELLOW}--:${COLOREND} pushes the current branch and adds origin as an upstream reference for it.\n"\
            "    pp       ${YELLOW}--:${COLOREND} pulls and pushes the current branch from origin to origin.\n"\
            "\n${BLOD}Remote(R)${COLOREND}\n"\
            "    R        ${YELLOW}--:${COLOREND} 管理跟踪的仓库\n"\
            "    Rl       ${YELLOW}--:${COLOREND} 展示所有远程连接的名字和 URLs\n"\
            "    Ra       ${YELLOW}--:${COLOREND} 添加一个新的远程连接\n"\
            "    Rx       ${YELLOW}--:${COLOREND} 移除一个远程连接\n"\
            "    Rm       ${YELLOW}--:${COLOREND} 重命名一个远程连接\n"\
            "    Ru       ${YELLOW}--:${COLOREND} fetches remotes updates.\n"\
            "    Rp       ${YELLOW}--:${COLOREND} prunes all stale remote tracking branches.\n"\
            "    Rs       ${YELLOW}--:${COLOREND} shows information about a given remote.\n"\
            "    RS       ${YELLOW}--:${COLOREND} 修改一个远程连接的 URLs\n"\
            "\n${BLOD}Stash(s)${COLOREND}\n"\
            "    s        ${YELLOW}--:${COLOREND} 隐藏修改\n"\
            "    sp       ${YELLOW}--:${COLOREND} 回复隐藏\n"\
            "\n${BLOD}Working tree(w)${COLOREND}\n"\
            "    ws       ${YELLOW}--:${COLOREND} 精简展示工作树状态\n"\
            "    wS       ${YELLOW}--:${COLOREND} 展示工作树状态\n"\
            "    wd       ${YELLOW}--:${COLOREND} 展示修改后与当前的不同\n"\
            "    wD       ${YELLOW}--:${COLOREND} 展示修改后与当前的不同（单词不同）\n"\
            "    wr       ${YELLOW}--:${COLOREND} resets the current HEAD to the specified state, does not touch the index nor the working tree.\n"\
            "    wR       ${YELLOW}--:${COLOREND} resets the current HEAD, index and working tree to the specified state.\n"\
            "    wc       ${YELLOW}--:${COLOREND} cleans untracked files from the working tree (dry-run).\n"\
            "    wC       ${YELLOW}--:${COLOREND} cleans untracked files from the working tree.\n"\
            "    wm       ${YELLOW}--:${COLOREND} 移动或重命名文件\n"\
            "    wM       ${YELLOW}--:${COLOREND} 强制移动或重命名文件\n"\
            "    wx       ${YELLOW}--:${COLOREND} 删除文件\n"\
            "    wX       ${YELLOW}--:${COLOREND} 强制删除文件\n"\
            "\n${BLOD}Setting${COLOREND}\n"\
            "    savepd  ${YELLOW}--${COLOREND} Git 将开始保存你的用户名和密码\n"
        ;;
    esac
}
# }}}

# Start
simple_git $@
