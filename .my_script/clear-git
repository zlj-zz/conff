#!/usr/bin/env bash
# ===================================
# This is a bash scirpt, it can help
#   you to clear your .git folder.
# ===================================


if [[ $1 ]]; then
    COUNT=$1
else
    COUNT=1
fi

TRASHCODES=$(git verify-pack -v .git/objects/pack/pack-*.idx | sort -k 3 -g | tail -${COUNT} | cut -b 1-40)

show_items(){
    echo -e "These are the largest $COUNT files"
    for ITEM in $TRASHCODES;do
        echo -e "\033[32m::\033[0m $ITEM"
    done
}

clear_(){
    for TRASHCODE in $TRASHCODES;do
        TRASHNAME=`git rev-list --objects --all | grep $TRASHCODE | cut -b 42-`
        echo -e "\n\n\033[33m==>\033[0m \033[31m${TRASHNAME}\033[0m"
        git log --pretty=oneline --branches -- $TRASHNAME

        git filter-branch --force --index-filter "git rm --cached --ignore-unmatch $TRASHNAME" --prune-empty -- --all

        rm -Rf .git/refs/original
        rm -Rf .git/logs/
        git reflog expire --expire=now --all
        git fsck --full --unreachable
        git repack -A -d
        git gc --aggressive --prune=now
    done
}

if_force_push(){
    echo -e "\n\n== Do you need to force push (yes/no):"
    if read -t 7 FORCEPUSH; then
        if [[ $FORCEPUSH=="y" || $FORCEPUSH=="Y" || $FORCEPUSH=="yes" ]];then
            echo "Start force push ... "
            remote_branch=$(git branch | cut -b 3-)
            git push --force origin $remote_branch
        else
            echo ""
        fi
    else
        echo -e "\033[33mWarm\033[0m: Timeout, will not force push."
    fi
}

# Main
show_items
clear_
if_force_push
echo -e "Clear Over."

#
